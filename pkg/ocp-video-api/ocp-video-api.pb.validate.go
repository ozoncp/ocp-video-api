// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-video-api/ocp-video-api.proto

package ocp_video_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListVideosV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVideosV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListVideosV1RequestValidationError is the validation error returned by
// ListVideosV1Request.Validate if the designated constraints aren't met.
type ListVideosV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVideosV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVideosV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVideosV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVideosV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVideosV1RequestValidationError) ErrorName() string {
	return "ListVideosV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVideosV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVideosV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVideosV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVideosV1RequestValidationError{}

// Validate checks the field values on ListVideosV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVideosV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVideosV1ResponseValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListVideosV1ResponseValidationError is the validation error returned by
// ListVideosV1Response.Validate if the designated constraints aren't met.
type ListVideosV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVideosV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVideosV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVideosV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVideosV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVideosV1ResponseValidationError) ErrorName() string {
	return "ListVideosV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVideosV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVideosV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVideosV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVideosV1ResponseValidationError{}

// Validate checks the field values on CreateVideoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVideoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSlideId() <= 0 {
		return CreateVideoV1RequestValidationError{
			field:  "SlideId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Link

	return nil
}

// CreateVideoV1RequestValidationError is the validation error returned by
// CreateVideoV1Request.Validate if the designated constraints aren't met.
type CreateVideoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVideoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVideoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVideoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVideoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVideoV1RequestValidationError) ErrorName() string {
	return "CreateVideoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVideoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVideoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVideoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVideoV1RequestValidationError{}

// Validate checks the field values on CreateVideoV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVideoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VideoId

	return nil
}

// CreateVideoV1ResponseValidationError is the validation error returned by
// CreateVideoV1Response.Validate if the designated constraints aren't met.
type CreateVideoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVideoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVideoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVideoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVideoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVideoV1ResponseValidationError) ErrorName() string {
	return "CreateVideoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVideoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVideoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVideoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVideoV1ResponseValidationError{}

// Validate checks the field values on MultiCreateVideoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateVideoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateVideoV1RequestValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateVideoV1RequestValidationError is the validation error returned by
// MultiCreateVideoV1Request.Validate if the designated constraints aren't met.
type MultiCreateVideoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateVideoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateVideoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateVideoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateVideoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateVideoV1RequestValidationError) ErrorName() string {
	return "MultiCreateVideoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateVideoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateVideoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateVideoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateVideoV1RequestValidationError{}

// Validate checks the field values on MultiCreateVideoV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateVideoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// MultiCreateVideoV1ResponseValidationError is the validation error returned
// by MultiCreateVideoV1Response.Validate if the designated constraints aren't met.
type MultiCreateVideoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateVideoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateVideoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateVideoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateVideoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateVideoV1ResponseValidationError) ErrorName() string {
	return "MultiCreateVideoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateVideoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateVideoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateVideoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateVideoV1ResponseValidationError{}

// Validate checks the field values on RemoveVideoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveVideoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVideoId() <= 0 {
		return RemoveVideoV1RequestValidationError{
			field:  "VideoId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveVideoV1RequestValidationError is the validation error returned by
// RemoveVideoV1Request.Validate if the designated constraints aren't met.
type RemoveVideoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveVideoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveVideoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveVideoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveVideoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveVideoV1RequestValidationError) ErrorName() string {
	return "RemoveVideoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveVideoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveVideoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveVideoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveVideoV1RequestValidationError{}

// Validate checks the field values on RemoveVideoV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveVideoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveVideoV1ResponseValidationError is the validation error returned by
// RemoveVideoV1Response.Validate if the designated constraints aren't met.
type RemoveVideoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveVideoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveVideoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveVideoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveVideoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveVideoV1ResponseValidationError) ErrorName() string {
	return "RemoveVideoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveVideoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveVideoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveVideoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveVideoV1ResponseValidationError{}

// Validate checks the field values on DescribeVideoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeVideoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVideoId() <= 0 {
		return DescribeVideoV1RequestValidationError{
			field:  "VideoId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeVideoV1RequestValidationError is the validation error returned by
// DescribeVideoV1Request.Validate if the designated constraints aren't met.
type DescribeVideoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeVideoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeVideoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeVideoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeVideoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeVideoV1RequestValidationError) ErrorName() string {
	return "DescribeVideoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeVideoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeVideoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeVideoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeVideoV1RequestValidationError{}

// Validate checks the field values on DescribeVideoV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeVideoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeVideoV1ResponseValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeVideoV1ResponseValidationError is the validation error returned by
// DescribeVideoV1Response.Validate if the designated constraints aren't met.
type DescribeVideoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeVideoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeVideoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeVideoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeVideoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeVideoV1ResponseValidationError) ErrorName() string {
	return "DescribeVideoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeVideoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeVideoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeVideoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeVideoV1ResponseValidationError{}

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Video) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for SlideId

	// no validation rules for Link

	return nil
}

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on NewVideo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NewVideo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSlideId() <= 0 {
		return NewVideoValidationError{
			field:  "SlideId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Link

	return nil
}

// NewVideoValidationError is the validation error returned by
// NewVideo.Validate if the designated constraints aren't met.
type NewVideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewVideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewVideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewVideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewVideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewVideoValidationError) ErrorName() string { return "NewVideoValidationError" }

// Error satisfies the builtin error interface
func (e NewVideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewVideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewVideoValidationError{}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_video_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpVideoApiClient is the client API for OcpVideoApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpVideoApiClient interface {
	// Возвращает список видео
	ListVideosV1(ctx context.Context, in *ListVideosV1Request, opts ...grpc.CallOption) (*ListVideosV1Response, error)
	// Возвращает описание видео по его идентификатору
	DescribeVideoV1(ctx context.Context, in *DescribeVideoV1Request, opts ...grpc.CallOption) (*DescribeVideoV1Response, error)
	// Создает новое видео
	CreateVideoV1(ctx context.Context, in *CreateVideoV1Request, opts ...grpc.CallOption) (*CreateVideoV1Response, error)
	// Создаёт новые видео (с батчингом)
	MultiCreateVideoV1(ctx context.Context, in *MultiCreateVideoV1Request, opts ...grpc.CallOption) (*MultiCreateVideoV1Response, error)
	// Удаляет видео по идентификатору
	RemoveVideoV1(ctx context.Context, in *RemoveVideoV1Request, opts ...grpc.CallOption) (*RemoveVideoV1Response, error)
}

type ocpVideoApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpVideoApiClient(cc grpc.ClientConnInterface) OcpVideoApiClient {
	return &ocpVideoApiClient{cc}
}

func (c *ocpVideoApiClient) ListVideosV1(ctx context.Context, in *ListVideosV1Request, opts ...grpc.CallOption) (*ListVideosV1Response, error) {
	out := new(ListVideosV1Response)
	err := c.cc.Invoke(ctx, "/ocp.video.api.OcpVideoApi/ListVideosV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVideoApiClient) DescribeVideoV1(ctx context.Context, in *DescribeVideoV1Request, opts ...grpc.CallOption) (*DescribeVideoV1Response, error) {
	out := new(DescribeVideoV1Response)
	err := c.cc.Invoke(ctx, "/ocp.video.api.OcpVideoApi/DescribeVideoV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVideoApiClient) CreateVideoV1(ctx context.Context, in *CreateVideoV1Request, opts ...grpc.CallOption) (*CreateVideoV1Response, error) {
	out := new(CreateVideoV1Response)
	err := c.cc.Invoke(ctx, "/ocp.video.api.OcpVideoApi/CreateVideoV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVideoApiClient) MultiCreateVideoV1(ctx context.Context, in *MultiCreateVideoV1Request, opts ...grpc.CallOption) (*MultiCreateVideoV1Response, error) {
	out := new(MultiCreateVideoV1Response)
	err := c.cc.Invoke(ctx, "/ocp.video.api.OcpVideoApi/MultiCreateVideoV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpVideoApiClient) RemoveVideoV1(ctx context.Context, in *RemoveVideoV1Request, opts ...grpc.CallOption) (*RemoveVideoV1Response, error) {
	out := new(RemoveVideoV1Response)
	err := c.cc.Invoke(ctx, "/ocp.video.api.OcpVideoApi/RemoveVideoV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpVideoApiServer is the server API for OcpVideoApi service.
// All implementations must embed UnimplementedOcpVideoApiServer
// for forward compatibility
type OcpVideoApiServer interface {
	// Возвращает список видео
	ListVideosV1(context.Context, *ListVideosV1Request) (*ListVideosV1Response, error)
	// Возвращает описание видео по его идентификатору
	DescribeVideoV1(context.Context, *DescribeVideoV1Request) (*DescribeVideoV1Response, error)
	// Создает новое видео
	CreateVideoV1(context.Context, *CreateVideoV1Request) (*CreateVideoV1Response, error)
	// Создаёт новые видео (с батчингом)
	MultiCreateVideoV1(context.Context, *MultiCreateVideoV1Request) (*MultiCreateVideoV1Response, error)
	// Удаляет видео по идентификатору
	RemoveVideoV1(context.Context, *RemoveVideoV1Request) (*RemoveVideoV1Response, error)
	mustEmbedUnimplementedOcpVideoApiServer()
}

// UnimplementedOcpVideoApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpVideoApiServer struct {
}

func (UnimplementedOcpVideoApiServer) ListVideosV1(context.Context, *ListVideosV1Request) (*ListVideosV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideosV1 not implemented")
}
func (UnimplementedOcpVideoApiServer) DescribeVideoV1(context.Context, *DescribeVideoV1Request) (*DescribeVideoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVideoV1 not implemented")
}
func (UnimplementedOcpVideoApiServer) CreateVideoV1(context.Context, *CreateVideoV1Request) (*CreateVideoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoV1 not implemented")
}
func (UnimplementedOcpVideoApiServer) MultiCreateVideoV1(context.Context, *MultiCreateVideoV1Request) (*MultiCreateVideoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateVideoV1 not implemented")
}
func (UnimplementedOcpVideoApiServer) RemoveVideoV1(context.Context, *RemoveVideoV1Request) (*RemoveVideoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVideoV1 not implemented")
}
func (UnimplementedOcpVideoApiServer) mustEmbedUnimplementedOcpVideoApiServer() {}

// UnsafeOcpVideoApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpVideoApiServer will
// result in compilation errors.
type UnsafeOcpVideoApiServer interface {
	mustEmbedUnimplementedOcpVideoApiServer()
}

func RegisterOcpVideoApiServer(s grpc.ServiceRegistrar, srv OcpVideoApiServer) {
	s.RegisterService(&OcpVideoApi_ServiceDesc, srv)
}

func _OcpVideoApi_ListVideosV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideosV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVideoApiServer).ListVideosV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.video.api.OcpVideoApi/ListVideosV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVideoApiServer).ListVideosV1(ctx, req.(*ListVideosV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVideoApi_DescribeVideoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeVideoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVideoApiServer).DescribeVideoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.video.api.OcpVideoApi/DescribeVideoV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVideoApiServer).DescribeVideoV1(ctx, req.(*DescribeVideoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVideoApi_CreateVideoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVideoApiServer).CreateVideoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.video.api.OcpVideoApi/CreateVideoV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVideoApiServer).CreateVideoV1(ctx, req.(*CreateVideoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVideoApi_MultiCreateVideoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateVideoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVideoApiServer).MultiCreateVideoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.video.api.OcpVideoApi/MultiCreateVideoV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVideoApiServer).MultiCreateVideoV1(ctx, req.(*MultiCreateVideoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpVideoApi_RemoveVideoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVideoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpVideoApiServer).RemoveVideoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.video.api.OcpVideoApi/RemoveVideoV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpVideoApiServer).RemoveVideoV1(ctx, req.(*RemoveVideoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpVideoApi_ServiceDesc is the grpc.ServiceDesc for OcpVideoApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpVideoApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.video.api.OcpVideoApi",
	HandlerType: (*OcpVideoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVideosV1",
			Handler:    _OcpVideoApi_ListVideosV1_Handler,
		},
		{
			MethodName: "DescribeVideoV1",
			Handler:    _OcpVideoApi_DescribeVideoV1_Handler,
		},
		{
			MethodName: "CreateVideoV1",
			Handler:    _OcpVideoApi_CreateVideoV1_Handler,
		},
		{
			MethodName: "MultiCreateVideoV1",
			Handler:    _OcpVideoApi_MultiCreateVideoV1_Handler,
		},
		{
			MethodName: "RemoveVideoV1",
			Handler:    _OcpVideoApi_RemoveVideoV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-video-api/ocp-video-api.proto",
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ocp-video-api/internal/metrics (interfaces: Metrics)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncrementSuccessfulCreates mocks base method.
func (m *MockMetrics) IncrementSuccessfulCreates(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementSuccessfulCreates", arg0)
}

// IncrementSuccessfulCreates indicates an expected call of IncrementSuccessfulCreates.
func (mr *MockMetricsMockRecorder) IncrementSuccessfulCreates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSuccessfulCreates", reflect.TypeOf((*MockMetrics)(nil).IncrementSuccessfulCreates), arg0)
}

// IncrementSuccessfulRemoves mocks base method.
func (m *MockMetrics) IncrementSuccessfulRemoves(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementSuccessfulRemoves", arg0)
}

// IncrementSuccessfulRemoves indicates an expected call of IncrementSuccessfulRemoves.
func (mr *MockMetricsMockRecorder) IncrementSuccessfulRemoves(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSuccessfulRemoves", reflect.TypeOf((*MockMetrics)(nil).IncrementSuccessfulRemoves), arg0)
}

// IncrementSuccessfulUpdates mocks base method.
func (m *MockMetrics) IncrementSuccessfulUpdates(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementSuccessfulUpdates", arg0)
}

// IncrementSuccessfulUpdates indicates an expected call of IncrementSuccessfulUpdates.
func (mr *MockMetricsMockRecorder) IncrementSuccessfulUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementSuccessfulUpdates", reflect.TypeOf((*MockMetrics)(nil).IncrementSuccessfulUpdates), arg0)
}

// Init mocks base method.
func (m *MockMetrics) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockMetricsMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockMetrics)(nil).Init))
}
